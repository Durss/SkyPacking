package {	import fr.durss.skywar.skypacking.components.SPGraphicButton;	import fr.durss.skywar.skypacking.controller.FrontController;	import fr.durss.skywar.skypacking.data.Model;	import fr.durss.skywar.skypacking.data.SharedObjectManager;	import fr.durss.skywar.skypacking.data.SkinMetrics;	import fr.durss.skywar.skypacking.views.Background;	import fr.durss.skywar.skypacking.views.Finder;	import fr.durss.skywar.skypacking.views.Grid;	import fr.durss.skywar.skypacking.views.Input;	import fr.durss.skywar.skypacking.views.Nav;	import fr.durss.skywar.skypacking.views.Options;	import fr.durss.skywar.skypacking.views.Title;	import fr.durss.skywar.skypacking.views.TraybarIcon;	import fr.durss.utils.SpaceComputer;	import fr.durss.utils.secret.KonamiCodeChecker;	import gs.plugins.BlurFilterPlugin;	import gs.plugins.GlowFilterPlugin;	import gs.plugins.TweenPlugin;	import com.nurun.structure.mvc.model.events.ModelEvent;	import com.nurun.structure.mvc.views.ViewLocator;	import com.nurun.utils.text.CssManager;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.display.Screen;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.net.URLRequest;	import flash.system.Security;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.utils.setTimeout;	/**	 * Application's bootstrap	 * 	 * @author  Francois	 */	[SWF(width="320", height="360", backgroundColor="0xFFFFFF", frameRate="31")]	public class SkyPackingAir extends MovieClip {				private var _closeBt:SPGraphicButton;		private var _minimizeBt:SPGraphicButton;		private var _nav:Nav;		private var _back:Background;		private var _grid:Grid;		private var _finder:Finder;		private var _input:Input;		private var _title:Title;		private var _options:Options;		private var _defaultWindowSizes:Point;		private var _defaultWindowPos:Point;		private var _defaultGridPos:Point;		protected var _loader:Loader;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>SkyPacking</code>.<br>		 */		public function SkyPackingAir() {						TweenPlugin.activate([BlurFilterPlugin, GlowFilterPlugin]);						_loader = new Loader();			_loader.load(new URLRequest("fonts/Fonts.swf"));			_loader.contentLoaderInfo.addEventListener(Event.COMPLETE,			initialize);			_loader.contentLoaderInfo.addEventListener(ErrorEvent.ERROR,		initErrorHandler);			_loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,	initErrorHandler);		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Called if font file isn't found.		 */		protected function initErrorHandler(e:ErrorEvent):void {			var tf:TextField = addChild(new TextField()) as TextField;			tf.autoSize = TextFieldAutoSize.LEFT;			tf.textColor = 0xcc0000;			tf.text = "ERROR : Font loading failed...";			tf.x = Math.round((stage.stageWidth - tf.width) * .5); 			tf.y = Math.round((stage.stageHeight - tf.height) * .5); 		}				/**		 * Initialize the class.<br>		 */		protected function initialize(e:Event):void {			setCss();						stage.scaleMode	= StageScaleMode.NO_SCALE;			stage.align		= StageAlign.TOP_LEFT;			stage.showDefaultContextMenu = false;						var model:Model = new Model();			model.computer = new SpaceComputer(stage);			FrontController.getInstance().initialise(model);			ViewLocator.getInstance().initialise(model);						var code:KonamiCodeChecker	= new KonamiCodeChecker(stage);			code.addEventListener(Event.ACTIVATE, activateKonamiCodeHandler);			_back	= addChild(new Background()) as Background;			_nav	= addChild(new Nav()) as Nav;			_grid	= addChild(new Grid()) as Grid;			_finder	= addChild(new Finder()) as Finder;			_input	= addChild(new Input()) as Input;			_title	= addChild(new Title()) as Title;			_options= addChild(new Options()) as Options;						_closeBt			= addChild(new SPGraphicButton(SkinMetrics.getInstance().skinCloseAppButton)) as SPGraphicButton;			_minimizeBt			= addChild(new SPGraphicButton(SkinMetrics.getInstance().skinMinimizeAppButton)) as SPGraphicButton;			_closeBt.visible	= false;			_minimizeBt.visible = false;						/*FDT_IGNORE*/			CONFIG::Air {			/*FDT_IGNORE*/				stage.nativeWindow.x	= SharedObjectManager.getInstance().windowPos.x;				stage.nativeWindow.y	= SharedObjectManager.getInstance().windowPos.y;				_defaultWindowPos		= new Point(stage.nativeWindow.x, stage.nativeWindow.y);				addChild(new TraybarIcon());								model.addEventListener(ModelEvent.UPDATE,		modelUpdateHandler);				_nav.addEventListener(MouseEvent.MOUSE_DOWN,	startMoveWindowhandler);				_back.addEventListener(MouseEvent.MOUSE_DOWN,	startMoveWindowhandler);				_closeBt.addEventListener(MouseEvent.CLICK,		clickBtHandler);				_minimizeBt.addEventListener(MouseEvent.CLICK,	clickBtHandler);								_closeBt.visible	= true;				_minimizeBt.visible = true;			/*FDT_IGNORE*/			}			/*FDT_IGNORE*/						model.start();						computePositions();		}		/**		 * Resize and replace the elements.<br>		 */		private function computePositions():void {			_closeBt.x		= SkinMetrics.getInstance().closeAppButtonPos.x;			_closeBt.y		= SkinMetrics.getInstance().closeAppButtonPos.y;			_minimizeBt.x	= SkinMetrics.getInstance().minimizeAppButtonPos.x;			_minimizeBt.y	= SkinMetrics.getInstance().minimizeAppButtonPos.y;						_nav.x		= 0;			_back.y		= 19;						_title.x	= 7;			_title.y	= _back.y + 7;						_grid.x		= Math.round((_back.width - _grid.width) * .5);			_grid.y		= Math.round(_back.y + (_back.height - _grid.height) * .5);						_finder.x	= _grid.x;			_finder.y	= _grid.y;						_input.x	= _grid.x;			_input.y	= _grid.y;						_options.x	= 7;			_options.y	= _title.y + _title.height;						/*FDT_IGNORE*/			CONFIG::Air {			/*FDT_IGNORE*/				_defaultWindowSizes = new Point(stage.nativeWindow.width, stage.nativeWindow.height);			/*FDT_IGNORE*/			}			/*FDT_IGNORE*/			_defaultGridPos = new Point(_grid.x, _grid.y);		}		/**		 * Sets the css styles.<br>		 */		private function setCss():void {			CssManager.getInstance().styleSheet.clear();			var css:String = "";			css	+= ".version { fontFamily:Arial; color:#ffffff; font-size:8; font-weight:bold; }";			css	+= ".toolTipContent { fontFamily:Verdana; color:#494136; font-size:10; flash-bitmap:true; }";			css	+= ".submitButton { fontFamily:Arial; color:#000000; text-align:center; font-size:11; font-weight:bold; flash-alpha:1; }";			css	+= ".submitButton_disabled { fontFamily:Arial; color:#000000; text-align:center; font-size:11; font-weight:bold; flash-alpha:.5; }";			css	+= ".windowLabel { fontFamily:Arial; color:#A4A99A; font-size:12; font-weight:bold; }";			css	+= ".windowTabLabel { fontFamily:Arial; color:#cccccc; font-size:11; font-weight:bold; }";			css	+= ".windowTabLabelSelected { fontFamily:Arial; color:#494136; font-size:11; font-weight:bold; }";			css	+= ".checkBoxLabel { font-family:Arial; color:#ffffff; font-size:12; }";			css	+= ".updates { font-family:Arial; color:#A4A99A; font-size:10; flash-bitmap:true; }";			css	+= ".updateNumber { font-family:Arial; color:#ffffff; font-size:12; font-weight:bold; flash-bitmap:true; }";			css	+= ".downloadLabel { font-family:Arial; color:#A4A99A; text-align:center; font-size:16; }";			CssManager.getInstance().setCss(css);		}										//__________________________________________________________ EVENT HANDLERS				/**		 * Called when minimize or close button is clicked.		 */		private function clickBtHandler(e:MouseEvent):void {			if(e.currentTarget == _closeBt) {				stage.nativeWindow.close();			}else{				if(SharedObjectManager.getInstance().reduceOnTraybar) {					stage.nativeWindow.visible = false;				}else{					stage.nativeWindow.minimize();				}			}		}				/**		 * Called when background or navigation is clicked to move the window.		 */		private function startMoveWindowhandler(e:MouseEvent):void {			stage.nativeWindow.startMove();		}				/**		 * Called on model update to set the window's sizes when changing the copy mode.		 */		private function modelUpdateHandler(e:ModelEvent):void {			var model:Model = e.model as Model;			if(model.copyMode && _nav.visible) {				_defaultWindowPos			= new Point(stage.nativeWindow.x, stage.nativeWindow.y);				_nav.visible				= false;				_back.visible				= false;				_title.visible				= false;				_closeBt.visible			= false;				_minimizeBt.visible			= false;				stage.nativeWindow.x		= 0;				stage.nativeWindow.y		= 0;				stage.nativeWindow.width	= Screen.mainScreen.bounds.width;				stage.nativeWindow.height	= Screen.mainScreen.bounds.height;				_grid.x						= stage.nativeWindow.width * .5;				_grid.y						= stage.nativeWindow.height * .25;			}else if(!model.copyMode && _defaultWindowSizes != null && !_nav.visible) {				_nav.visible				= true;				_back.visible				= true;				_title.visible				= true;				_closeBt.visible			= true;				_minimizeBt.visible			= true;				_grid.x						= _defaultGridPos.x;				_grid.y						= _defaultGridPos.y;				stage.nativeWindow.x		= _defaultWindowPos.x;				stage.nativeWindow.y		= _defaultWindowPos.y;				stage.nativeWindow.width	= _defaultWindowSizes.x;				stage.nativeWindow.height	= _defaultWindowSizes.y;			}		}				/**		 * Called when konami code is written.		 */		private function activateKonamiCodeHandler(e:Event):void {			Security.allowDomain("*");			var loader:Loader = addChild(new Loader()) as Loader;			loader.load(new URLRequest("http://skywar.free.fr/apps/gradius/gradius.swf"));			loader.x = _back.x + 3;			loader.y = _back.y + 3;			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadCompleteHandler);		}				private function loadCompleteHandler(e:Event):void {			setTimeout(test, 100, LoaderInfo(e.target).loader.content);		}		private function test(content:MovieClip):void {			content.getChildAt(0)["setSizes"](320, 360);		}	}}