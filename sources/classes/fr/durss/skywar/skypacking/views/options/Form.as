package fr.durss.skywar.skypacking.views.options {	import com.nurun.components.text.CssTextField;	import fr.durss.skywar.skypacking.components.SPCheckbox;	import fr.durss.skywar.skypacking.data.SharedObjectManager;	import fr.durss.skywar.skypacking.views.AbstractSPView;	import com.nurun.components.form.FormComponent;	import com.nurun.structure.mvc.model.events.IModelEvent;	import flash.desktop.NativeApplication;	import flash.display.DisplayObject;	import flash.events.Event;	/**	 * Displasy the form inputs for options	 * 	 * @author  Francois	 */	public class Form extends AbstractSPView {				private var _keepInFront:SPCheckbox;		private var _traybarMin:SPCheckbox;		private var _items:Array;		private var _startupExecute:SPCheckbox;								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>Form</code>.		 */		public function Form() {			super();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */		override public function update(e:IModelEvent):void {			//		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		override protected function initialize(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, initialize);						/*FDT_IGNORE*/			CONFIG::Air {			/*FDT_IGNORE*/				_keepInFront	= addChild(new SPCheckbox("Conserver la fenêtre au premier plan.")) as SPCheckbox;				_traybarMin		= addChild(new SPCheckbox("Reduire dans la barre de notifications.")) as SPCheckbox;				_startupExecute	= addChild(new SPCheckbox("Ouvrir l'application au démarage du système.")) as SPCheckbox;								_items = [_keepInFront, _traybarMin, _startupExecute];								_keepInFront.selected	= SharedObjectManager.getInstance().alwaysInFront;				_traybarMin.selected	= SharedObjectManager.getInstance().reduceOnTraybar;				_startupExecute.selected= SharedObjectManager.getInstance().startupExecute;				stage.nativeWindow.alwaysInFront = _keepInFront.selected;												var i:int, len:int;				len = _items.length;				for(i = 0; i < len; ++i) {					FormComponent(_items[i]).addEventListener(Event.CHANGE, changeHandler);				}								computePositions();			/*FDT_IGNORE*/			}			/*FDT_IGNORE*/			//If not AIR compiled			if(_keepInFront == null) {				var txt:CssTextField = new CssTextField("updates");				txt.text = "<font color=\"#777777\">(aucune option disponible pour la version SWF)</font>";				addChild(txt);			}		}				/**		 * Resize and replace the elements.		 */		private function computePositions():void {			var i:int, len:int, py:int, item:DisplayObject;			len = _items.length;			for(i = 0; i < len; ++i) {				item = _items[i];				item.width = WIDTH - 14;				item.y = py;				py += item.height;			}		}				/**		 * Called when a component's state changes		 */		private function changeHandler(e:Event):void {			SharedObjectManager.getInstance().alwaysInFront		= _keepInFront.selected;			SharedObjectManager.getInstance().reduceOnTraybar	= _traybarMin.selected;			SharedObjectManager.getInstance().startupExecute	= _startupExecute.selected;						/*FDT_IGNORE*/			CONFIG::Air {			/*FDT_IGNORE*/				stage.nativeWindow.alwaysInFront = _keepInFront.selected;				NativeApplication.nativeApplication.startAtLogin = _startupExecute.selected;			/*FDT_IGNORE*/			}			/*FDT_IGNORE*/		}			}}