package fr.durss.skywar.skypacking.views.options {	import fr.durss.skywar.skypacking.components.LoadBar;	import fr.durss.skywar.skypacking.components.SubmitButton;	import fr.durss.skywar.skypacking.controller.FrontController;	import fr.durss.skywar.skypacking.data.AppVersion;	import fr.durss.skywar.skypacking.data.SharedObjectManager;	import fr.durss.skywar.skypacking.data.SkinMetrics;	import fr.durss.skywar.skypacking.events.UpdateEvent;	import fr.durss.skywar.skypacking.views.AbstractSPView;	import com.nurun.components.scroll.ScrollPane;	import com.nurun.components.scroll.scrollable.ScrollableTextField;	import com.nurun.components.scroll.scroller.scrollbar.Scrollbar;	import com.nurun.components.text.CssTextField;	import com.nurun.structure.mvc.model.events.IModelEvent;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;	import flash.events.TimerEvent;	import flash.net.FileReference;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import flash.system.Security;	import flash.ui.Keyboard;	import flash.utils.Timer;	/**	 * Manages the updates.<br>	 * <br>	 * Checks at a regular interval if an update is available.	 * 	 * @author  Francois	 */	public class Updater extends AbstractSPView {		private var _timerCheck:Timer;		private var _updateDetails:ScrollableTextField;		private var _scrollbar:Scrollbar;		private var _scrollpane:ScrollPane;		private var _label:CssTextField;		private var _downloadUpdate:SubmitButton;		private var _loadbar:LoadBar;		private var _fr:FileReference;		private var _ignoreStats:int;		private var _loader:URLLoader;		private var _isOpening:Boolean;		private const ROOT:String = "http://skywar.free.fr/apps/skypacking/";		private var _height:Number;								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>Updater</code>.		 */		public function Updater() {			super();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		override public function set height(value:Number):void {			_height = value;			computePositions();		}		/* ****** *		 * PUBLIC *		 * ****** */		override public function update(e:IModelEvent):void {			//		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		override protected function initialize(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, initialize);						Security.loadPolicyFile(ROOT + "crossdomainSkypacking.xml");						_updateDetails	= addChild(new ScrollableTextField()) as ScrollableTextField;			_scrollbar		= addChild(new Scrollbar(SkinMetrics.getInstance().skinScroll)) as Scrollbar;			_scrollpane		= addChild(new ScrollPane(_updateDetails, _scrollbar)) as ScrollPane;			_label			= addChild(new CssTextField("downloadLabel")) as CssTextField;			_downloadUpdate	= addChild(new SubmitButton("Télécharger la nouvelle version")) as SubmitButton;			_loadbar		= addChild(new LoadBar()) as LoadBar;						_loadbar.visible	= false;			_scrollpane.autoHideScrollers = true;			_downloadUpdate.visible = false;			_label.wordWrap			= true;			_updateDetails.wordWrap	= true;			_isOpening				= true;						_downloadUpdate.addEventListener(MouseEvent.CLICK, submitHandler);			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);						//Update checking interval in hours			var interval:Number = .5;			_timerCheck	= new Timer(interval * 60 * 60 * 1000);			_timerCheck.addEventListener(TimerEvent.TIMER, checkForUpdate);			_timerCheck.start();						//This timer is here just to let me having time to press CTRL			//key to ignore stats server side and display my GUID (to add it to ignore list).			var timer:Timer = new Timer(2000, 1);			timer.addEventListener(TimerEvent.TIMER, checkForUpdate);			timer.start();			_label.setText("Recherche de mise à jour<br/>en cours ...");						computePositions();		}				/**		 * Resize and replace the elements.		 */		private function computePositions():void {			_label.y			= Math.round((_height - _label.height) * .5);						_scrollpane.x		= 5;			_scrollpane.y		= 10;			_scrollpane.width	= WIDTH - 20;			_scrollpane.height	= _height - 100;			_label.width		= WIDTH - 20;						_downloadUpdate.y	= Math.round(_scrollpane.y + Math.min(_scrollpane.height, _updateDetails.textHeight) + 10);			_downloadUpdate.x	= Math.round((WIDTH - _downloadUpdate.width) * .5);			_scrollpane.update();		}				/**		 * Checks if an update is available.		 */		private function checkForUpdate(e:TimerEvent):void {			if(stage.hasEventListener(KeyboardEvent.KEY_DOWN)){				stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			}			if(_loader != null) {				_loader.removeEventListener(Event.COMPLETE, loadCompleteHandler);				_loader.removeEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			}						var request:URLRequest	= new URLRequest(ROOT + "updater.php?cachKiller="+new Date().getTime().toString());			var vars:URLVariables	= new URLVariables();			vars.open		= _isOpening? "1" : "0";			vars.guid		= SharedObjectManager.getInstance().guid;			vars.v			= AppVersion.VERSION;			try {				stage.nativeWindow;				vars.appType	= "AIR";			}catch(evt:Error) {				vars.appType	= "SWF";			}			if(_ignoreStats == 0x3){				vars.ignore = "true";			}			request.method	= URLRequestMethod.POST;			request.data	= vars;			_loader = new URLLoader(request);			_loader.addEventListener(Event.COMPLETE, loadCompleteHandler);			_loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			_label.setText("Recherche de mise à jour<br/>en cours ...");			_isOpening = false;		}												//__________________________________________________________ UTILS				/**		 * Converts a String version code into a Number equivalent.		 */		private function convertVersionToNumber(v:String):Number {			v = v.replace(/^0*\./, ".");			var ret:String = v.replace(new RegExp("\\.", "gi"), "");			if(v.substr(0, 1) == ".") {				ret = "."+ret; 			}			return parseFloat(ret);		}				/**		 * Called when a key is pressed		 */		private function keyDownHandler(e:KeyboardEvent):void {			if(e.keyCode == Keyboard.CONTROL) {				_ignoreStats = _ignoreStats | 0x2;			}			if(e.keyCode == Keyboard.PAGE_UP) {				_ignoreStats = _ignoreStats | 0x1;			}		}												//__________________________________________________________ UPDATE HANDLERS				/**		 * Called if url loading fails.		 */		private function ioErrorHandler(e:IOErrorEvent):void {			_label.setText("Recherche de mise à jour échouée!");			computePositions();		}		/**		 * Called when XML version is loaded		 */		private function loadCompleteHandler(e:Event):void {			var i:int, txt:String, version:String, xml:XML, updates:XMLList;			try {				xml = new XML(_loader.data);			}catch(event:Error) {				_label.setText("Recherche de mise à jour échouée!<br/><br/><font size='12'>(XML bad formated)</font>");				computePositions();				return;			}			version = xml.child("version")[0];						if(convertVersionToNumber(version) > convertVersionToNumber(AppVersion.VERSION)) {				_downloadUpdate.enabled = true;				_downloadUpdate.visible = true;				_label.visible	= false;				updates			= xml.child("updates").child("update");				version			= (version.substr(0,1) == ".")? "0"+version : version;				txt				= "<p align=\"center\"><span class=\"updateNumber\">Version "+version+" disponible</span></p><br/>";				for(i = 0; i<updates.length(); i++) {					txt += "<span class=\"updateNumber\">"+(i+1)+"</span> - "+updates[i]+"<br/><br/>";				}				_updateDetails.setText(txt, "updates");				_downloadUpdate.label = "Télécharger (AIR)";				dispatchEvent(new UpdateEvent(UpdateEvent.UPDATE_AVAILABLE));				FrontController.getInstance().setViewState(3);			} else {				_label.selectable	= _ignoreStats == 0x3;				var guid:String		= _label.selectable ? "<br /><br/><font size=\"10\">Application's GUID :<br/>"+SharedObjectManager.getInstance().guid+"</font>" : "";				_label.setText("Vous avez la dernière version"+guid);			}			computePositions();		}										//__________________________________________________________ DOWNLOAD EVENTS		/**		 * Called when submit button is clicked to download the last version.		 */		private function submitHandler(e:MouseEvent):void {			_fr = new FileReference();			_fr.download(new URLRequest(ROOT + "SkyPacking.air"));			_fr.addEventListener(Event.COMPLETE, downloadCompleteHandler);			_fr.addEventListener(ErrorEvent.ERROR, downloadErrorHandler);			_fr.addEventListener(IOErrorEvent.IO_ERROR, downloadErrorHandler);			_fr.addEventListener(ProgressEvent.PROGRESS, loadProgressHandler);			_loadbar.percent		= 0;			_loadbar.visible		= true;			_downloadUpdate.label	= "patientez svp...";			_downloadUpdate.enabled	= false;			_loadbar.x				= 10;			_loadbar.width			= WIDTH - 30;			_loadbar.y				= _downloadUpdate.y + _downloadUpdate.height + 10;			computePositions();		}				/**		 * Called during AIR downloading progression.		 */		private function loadProgressHandler(e:ProgressEvent):void {			_loadbar.percent	= e.bytesLoaded / e.bytesTotal;		}		/**		 * Called when download completes		 */		private function downloadCompleteHandler(event:Event):void {			_loadbar.visible		= false;			_downloadUpdate.visible = false;			_label.visible = true;			_label.setText("Téléchargement terminé!<br/><font size=\"13\">Vous pouvez fermer l'application et ouvrir le fichier .air téléchargé!</font>");			computePositions();			_label.y	= _downloadUpdate.y;		}				/**		 * Called if download fails		 */		private function downloadErrorHandler(event:Event):void {			_loadbar.visible		= false;			_downloadUpdate.visible = false;			_label.visible = true;			_label.setText("Erreur de téléchargement.");			computePositions();			_label.y	= _downloadUpdate.y;		}			}}