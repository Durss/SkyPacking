package fr.durss.skywar.skypacking.views {	import fr.durss.skywar.skypacking.controller.FrontController;	import fr.durss.skywar.skypacking.data.Model;	import fr.durss.skywar.skypacking.data.SkinMetrics;	import com.nurun.components.form.FormComponentGroup;	import com.nurun.components.form.ToggleButton;	import com.nurun.components.vo.Margin;	import com.nurun.structure.mvc.model.events.IModelEvent;	import com.nurun.structure.mvc.views.IView;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.ui.Mouse;	import flash.utils.Dictionary;	/**	 * Displays the application's navigation.	 * 	 * @author  Francois	 */	public class Nav extends AbstractSPView implements IView {				private var _items:Array;		private var _indexes:Dictionary;		private var _group:FormComponentGroup;		private var _px:int;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>Nav</code>.		 */		public function Nav() {			super();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */		override public function update(e:IModelEvent):void {			var model:Model = e.model as Model;						if(_items.length > 0){				var bt:ToggleButton = _items[model.stateIndex] as ToggleButton;				if(!bt.selected) {					bt.selected = true;					Mouse.show();				}			}						if(_items.length > 0) return;						var i:int, len:int;			len = model.navItems.length;			for(i = 0; i < len; ++i) {				addItem(model.navItems[i]);			}			open();		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		override protected function initialize(e:Event):void {			super.initialize(e);			_indexes = new Dictionary();			_items = [];			_group = new FormComponentGroup();		}				/**		 * Adds an item to the nav.		 */		private function addItem(label:String):void {			var item:ToggleButton	= new ToggleButton(label, "windowTabLabel", "windowTabLabelSelected", SkinMetrics.getInstance().skinTabWindow, SkinMetrics.getInstance().skinTabWindowSelected);			item.x = _px;			item.yLabelOffset = 2;			item.height = 20;			item.contentMargin = new Margin(0, 0, 0, 0, 11, 5);			item.addEventListener(MouseEvent.CLICK, clickTabHandler);			_px += item.width + 1;			if(_items.length == 0) item.selected = true;			_indexes[item] = _items.length;			_items.push(item);			_group.add(item);			addChild(item);		}				/**		 * Called when a tab item is clicked.		 */		private function clickTabHandler(e:MouseEvent):void {			//Click handler can be called when ENTER key is pressed while the			//button has focus. In that case the mouse may be hide so we force			//its visibility.			Mouse.show();			FrontController.getInstance().setViewState(_indexes[e.currentTarget]);		}	}}