package fr.durss.skywar.skypacking.views {	import fr.durss.skywar.skypacking.data.Model;	import fr.durss.utils.SpaceComputer;	import fr.durss.utils.events.SpaceComputerEvent;	import com.nurun.components.text.CssTextField;	import com.nurun.structure.mvc.model.events.IModelEvent;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.events.Event;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.utils.getTimer;	/**	 * 	 * @author  Francois	 */	public class Finder extends AbstractSPView {				private var _resultTxt:CssTextField;		private var _lastTime:int;		private var _loops:int;		private var _timeZone:Number;		private var _totalDurations:int;		private var _lastPercent:Number;		private var _computer:SpaceComputer;		private var _exMax:int;		private var _max:int;		private var _bmdResults:BitmapData;										/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>Finder</code>.<br>		 */		public function Finder() {			super();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */		override public function update(e:IModelEvent):void {			var model:Model = e.model as Model;			if(_computer == null) {				_computer = model.computer;				_computer.addEventListener(SpaceComputerEvent.SEARCH_START, newSearchHandler);				_computer.addEventListener(SpaceComputerEvent.SEARCH_PROGRESS, progressHandler);				_computer.addEventListener(SpaceComputerEvent.SEARCH_COMPLETE, newTotalHandler);			}						if(model.stateIndex == 2) {				open();				computePositions();			}else{				close();			}		}				override public function open():void {			super.open();			mouseChildren = false;			mouseEnabled = false;		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.<br>		 */		override protected function initialize(e:Event):void {			super.initialize(e);			_resultTxt	= addChild(new CssTextField("windowLabel")) as CssTextField;						_timeZone	= new Date(0).getTimezoneOffset() * 60000;						_bmdResults= new BitmapData(COLS * CELL_SIZE, ROWS * CELL_SIZE, true, 0);			addChild(new Bitmap(_bmdResults));						mouseChildren = false;			mouseEnabled = false;						computePositions();		}				/**		 * Resize and replace the elements.<br>		 */		private function computePositions():void {			_resultTxt.x= Math.round((WIDTH - (x*2) - _resultTxt.width) * .5);			_resultTxt.y= Math.round(_bmdResults.height + 3);		}				/**		 * Draws the current solutions.		 */		private function drawSolutions(solutions:Array):void {			var i:int, pos:Point;			_max = solutions.length;			if(_max < _exMax && _max > 0) return;			_exMax = _max;			_bmdResults.fillRect(_bmdResults.rect, 0);			for(i = 0; i < _max; ++i) {				pos = solutions[i] as Point;				_bmdResults.fillRect(new Rectangle(pos.x * CELL_SIZE + 1, pos.y * CELL_SIZE + 1, CELL_SIZE * 2 - 2, CELL_SIZE * 2 - 2), 0x88FFFFFF);			}			computePositions();		}								//__________________________________________________________ UTILS				/**		 * Take a number and returns a string represention with X digits based.		 */		private function toDigits(i:int, digits:int=2):String {			var str:String = i.toString();			while(str.length < digits) str = "0"+str;			return str;		}								//__________________________________________________________ COMPUTER EVENTS				/**		 * Called when a new search starts.		 */		private function newSearchHandler(e:SpaceComputerEvent):void {			_loops			= 0;			_exMax			= 0;			_lastTime		= getTimer();			_lastPercent	= 0;			_totalDurations	= 0;			drawSolutions(e.solutions);		}		/**		 * Called during compute progression.		 */		private function progressHandler(e:SpaceComputerEvent):void {			if(!_opened) return;			_loops ++;			_totalDurations			+= getTimer() - _lastTime;			var p:Number			= e.percent;			var loopPercent:Number	= p - _lastPercent;			var loopDuration:Number	= _totalDurations / _loops;			var totalLoop:Number	= (1 - p) / loopPercent;			var rest:Number			= totalLoop * loopDuration + 1000;			if(rest < 1200) rest	= 0;			var d:Date				= new Date(rest + _timeZone);			var units:int			= Math.floor(p * 100);			var pStr:String			= toDigits(units)+"."+toDigits(p * 10000 - units * 100);			if(isNaN(d.getFullYear()) || d.getDate() > 1) {				_resultTxt.setText(e.solutions.length+" solutions. Calcul en cours : " + pStr + "% (>24h)");			}else{				_resultTxt.setText(e.solutions.length+" solutions. Calcul en cours : " + pStr + "% (" + toDigits(d.getHours(), 1) + "h" + toDigits(d.getMinutes()) + "m" + toDigits(d.getSeconds()) + "s)");			}			_lastTime		= getTimer();			_lastPercent	= p;			drawSolutions(e.solutions);		}		/**		 * Called when a new total of places is available.<br>		 */		private function newTotalHandler(e:SpaceComputerEvent = null):void {			_resultTxt.setText(e.solutions.length + " places de 2x2 disponibles.");			drawSolutions(e.solutions);		}			}}