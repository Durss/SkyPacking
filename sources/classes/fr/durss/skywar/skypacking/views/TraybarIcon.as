package fr.durss.skywar.skypacking.views {	import fr.durss.skywar.skypacking.data.AppVersion;	import fr.durss.skywar.skypacking.data.SharedObjectManager;	import fr.durss.skywar.skypacking.graphics.TraybarIconGraphics;	import com.nurun.structure.mvc.model.events.IModelEvent;	import com.nurun.structure.mvc.views.IView;	import flash.desktop.NativeApplication;	import flash.desktop.SystemTrayIcon;	import flash.display.BitmapData;	import flash.display.NativeMenu;	import flash.display.NativeMenuItem;	import flash.display.Screen;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.NativeWindowBoundsEvent;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.utils.getTimer;	/**	 * Displays the traybar icon.	 * 	 * @author  Francois	 */	public class TraybarIcon extends AbstractSPView implements IView {		private var _lastClickTime:int;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>TraybarIcon</code>.		 */		public function TraybarIcon() {			super();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */		override public function update(e:IModelEvent):void {			//		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.		 */		override protected function initialize(e:Event):void {			super.initialize(e);			if(NativeApplication.supportsSystemTrayIcon) {				var bmd:BitmapData = new BitmapData(16, 16, true, 0);				bmd.draw(new TraybarIconGraphics());				NativeApplication.nativeApplication.icon.bitmaps = [bmd];				SystemTrayIcon(NativeApplication.nativeApplication.icon).tooltip = "SkyPacking";							var menu:NativeMenu = new NativeMenu();				var openMenu:NativeMenuItem = new NativeMenuItem("Open"); 				var closeMenu:NativeMenuItem = new NativeMenuItem("Close"); 				menu.addItem(openMenu);				menu.addItem(closeMenu);				var systray:SystemTrayIcon = NativeApplication.nativeApplication.icon as SystemTrayIcon; 				systray.menu = menu;								systray.addEventListener(MouseEvent.CLICK,	doubleClickSystrayHandler);				openMenu.addEventListener(Event.SELECT,		openAppHandler);				closeMenu.addEventListener(Event.SELECT,	closeAppHandler);				stage.nativeWindow.addEventListener(NativeWindowBoundsEvent.MOVE, movingAppHandler);								var pos:Point = SharedObjectManager.getInstance().windowPos;				if(Screen.getScreensForRectangle(new Rectangle(pos.x, pos.y, 1, 1)).length == 0 || pos.x == -1) {					pos.x = Screen.mainScreen.visibleBounds.right - stage.nativeWindow.width;					pos.y = Screen.mainScreen.visibleBounds.bottom - stage.nativeWindow.height;					SharedObjectManager.getInstance().windowPos = pos;				}				stage.nativeWindow.x = pos.x;				stage.nativeWindow.y = pos.y;			}			stage.nativeWindow.title = "SkyPacking v"+AppVersion.VERSION;		}				/**		 * Called when traybar icon is clicked.		 */		private function doubleClickSystrayHandler(e:MouseEvent):void {			if(getTimer() - _lastClickTime < 1000) {				stage.nativeWindow.visible = true;			}			_lastClickTime = getTimer();		}				/**		 * Called to open the application.		 */		private function openAppHandler(e:Event):void {			stage.nativeWindow.visible = true;		}				/**		 * Called to close the application.		 */		private function closeAppHandler(e:Event):void {			stage.nativeWindow.close();		}				/**		 * Called when application's window is moved.		 */		private function movingAppHandler(e:NativeWindowBoundsEvent):void {			//ugly test but an asynchronism is breaking my balls...			//This test is used to ignore window moving when enabling copy mode.			if(stage.nativeWindow.x == 0 || stage.nativeWindow.y == 0) return;			var pos:Point = new Point(stage.nativeWindow.x, stage.nativeWindow.y);			SharedObjectManager.getInstance().windowPos = pos;		}	}}