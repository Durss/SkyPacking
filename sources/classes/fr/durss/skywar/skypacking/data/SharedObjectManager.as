package fr.durss.skywar.skypacking.data {	import com.adobe.crypto.SHA1;	import flash.events.EventDispatcher;	import flash.geom.Point;	import flash.net.SharedObject;	import flash.utils.Dictionary;	/**	 * Manages all the data stored in SharedObjects.<br>	 * <br>	 * This class fires <code>SharedObjectManagerEvent</code> events.	 * 	 * @author Francois	 */	public class SharedObjectManager extends EventDispatcher {		private static var _instance:SharedObjectManager;		private var _so:SharedObject;		private var _cache:Dictionary;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		public function SharedObjectManager(enforcer:singletonEnforcer) {			if (enforcer == null) {				throw new Error("Error: Instantiation failed: Use SharedObjectManager.getInstance() instead of creating an instance.");			}			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Gets the static instance.<br>		 */		public static function getInstance():SharedObjectManager {			if (_instance == null) {				_instance = new SharedObjectManager(new singletonEnforcer());			}			return _instance;		}				/**		 * Gets the skin to display.		 */		public function get skin():String { return getData("skin", SkinMetrics.SKIN_SKATCH); }				/**		 * Sets if the application should be reduced on the traybar.		 */		public function set reduceOnTraybar(value:Boolean):void { setData("systrayReduce", value); }				/**		 * Gets if the application should be reduced on the traybar.		 */		public function get reduceOnTraybar():Boolean { return getData("systrayReduce", true); }						/**		 * Gets the last window's position.		 */		public function get windowPos():Point {			var values:Array =  getData("windowPos", [-1, -1]);			return new Point(values[0], values[1]);		}				/**		 * Sets the last window's position.		 */		public function set windowPos(value:Point):void { setData("windowPos", [value.x, value.y]); }						/**		 * Gets if the window should be always on top.		 */		public function get alwaysInFront():Boolean { return getData("alwaysInFront", true); }				/**		 * Sets if the window should be always on top.		 */		public function set alwaysInFront(value:Boolean):void { setData("alwaysInFront", value); }						/**		 * Gets if the application should start at system startup.		 */		public function get startupExecute():Boolean { return getData("startupExecute", false); }				/**		 * Sets if the application should start at system startup.		 */		public function set startupExecute(value:Boolean):void { setData("startupExecute", value); }						/**		 * Gets the user's GUID.		 */		public function get guid():String {			if(getData("guid", -1) == -1) {				var seed:Number = new Date().getTime() + Math.random();				setData("guid", SHA1.hash(seed.toString()));			}			return getData("guid", -1);		}								/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Gets a SharedObject's data		 * 		 * @param id		datas ID.		 * @param value		data's value.		 */		public function setData(id:String, value:*):void {			_so.data[id]	= value;			_cache[id]		= value;						//Don't call flush() method! It kills the performances!			//Moreover the flush() method is automatically called on flash close			//and / or when the flash is garbage collected so it's not really needed.			//_so.flush();		}		/**		 * Gets a SharedObject's data.<p>		 * 		 * @param id			datas ID.		 * @param defaultValue	default value returned if the data does not exist yet.		 * 		 * @return	the data's value or the defaultValue parameter.		 */		public function getData(id:String, defaultValue:*):* {			if(_cache[id] == undefined) {				if(_so.data[id] == undefined) {					_so.data[id] = defaultValue;					_cache[id] = defaultValue;					return defaultValue;				}else{					_cache[id] = _so.data[id];				}			}			return _cache[id];		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initializes some vars and the statics sharedObjects.<br>		 */		private function initialize():void {			_so = SharedObject.getLocal("skypacking");			_cache = new Dictionary();		}	}}internal class singletonEnforcer { }